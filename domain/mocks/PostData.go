// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "backend/domain"

	mock "github.com/stretchr/testify/mock"
)

// PostData is an autogenerated mock type for the PostData type
type PostData struct {
	mock.Mock
}

// CreatePostData provides a mock function with given fields: newpost
func (_m *PostData) CreatePostData(newpost domain.Post) domain.Post {
	ret := _m.Called(newpost)

	var r0 domain.Post
	if rf, ok := ret.Get(0).(func(domain.Post) domain.Post); ok {
		r0 = rf(newpost)
	} else {
		r0 = ret.Get(0).(domain.Post)
	}

	return r0
}

// DeletePostData provides a mock function with given fields: postid, userid
func (_m *PostData) DeletePostData(postid int, userid int) bool {
	ret := _m.Called(postid, userid)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(postid, userid)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ReadAllCommentData provides a mock function with given fields:
func (_m *PostData) ReadAllCommentData() []domain.CommentUser {
	ret := _m.Called()

	var r0 []domain.CommentUser
	if rf, ok := ret.Get(0).(func() []domain.CommentUser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.CommentUser)
		}
	}

	return r0
}

// ReadAllPostData provides a mock function with given fields:
func (_m *PostData) ReadAllPostData() []domain.PostComent {
	ret := _m.Called()

	var r0 []domain.PostComent
	if rf, ok := ret.Get(0).(func() []domain.PostComent); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.PostComent)
		}
	}

	return r0
}

// UpdatePostData provides a mock function with given fields: newpost
func (_m *PostData) UpdatePostData(newpost domain.Post) domain.Post {
	ret := _m.Called(newpost)

	var r0 domain.Post
	if rf, ok := ret.Get(0).(func(domain.Post) domain.Post); ok {
		r0 = rf(newpost)
	} else {
		r0 = ret.Get(0).(domain.Post)
	}

	return r0
}

type mockConstructorTestingTNewPostData interface {
	mock.TestingT
	Cleanup(func())
}

// NewPostData creates a new instance of PostData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPostData(t mockConstructorTestingTNewPostData) *PostData {
	mock := &PostData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
