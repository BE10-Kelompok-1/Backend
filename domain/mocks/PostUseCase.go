// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "backend/domain"

	mock "github.com/stretchr/testify/mock"
)

// PostUseCase is an autogenerated mock type for the PostUseCase type
type PostUseCase struct {
	mock.Mock
}

// CreatePost provides a mock function with given fields: newpost, userid
func (_m *PostUseCase) CreatePost(newpost domain.Post, userid int) int {
	ret := _m.Called(newpost, userid)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.Post, int) int); ok {
		r0 = rf(newpost, userid)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// UpdatePost provides a mock function with given fields: newpost, postid, userid
func (_m *PostUseCase) UpdatePost(newpost domain.Post, postid int, userid int) int {
	ret := _m.Called(newpost, postid, userid)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.Post, int, int) int); ok {
		r0 = rf(newpost, postid, userid)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

type mockConstructorTestingTNewPostUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewPostUseCase creates a new instance of PostUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPostUseCase(t mockConstructorTestingTNewPostUseCase) *PostUseCase {
	mock := &PostUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
