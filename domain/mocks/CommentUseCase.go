// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "backend/domain"

	mock "github.com/stretchr/testify/mock"
)

// CommentUseCase is an autogenerated mock type for the CommentUseCase type
type CommentUseCase struct {
	mock.Mock
}

// CreateComment provides a mock function with given fields: newcomment, userid
func (_m *CommentUseCase) CreateComment(newcomment domain.Comment, userid int) int {
	ret := _m.Called(newcomment, userid)

	var r0 int
	if rf, ok := ret.Get(0).(func(domain.Comment, int) int); ok {
		r0 = rf(newcomment, userid)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// DeleteComment provides a mock function with given fields: commentid, bookid
func (_m *CommentUseCase) DeleteComment(commentid int, bookid int) int {
	ret := _m.Called(commentid, bookid)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(commentid, bookid)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// ReadComment provides a mock function with given fields:
func (_m *CommentUseCase) ReadComment() ([]domain.CommentUser, int) {
	ret := _m.Called()

	var r0 []domain.CommentUser
	if rf, ok := ret.Get(0).(func() []domain.CommentUser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.CommentUser)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func() int); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

type mockConstructorTestingTNewCommentUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommentUseCase creates a new instance of CommentUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommentUseCase(t mockConstructorTestingTNewCommentUseCase) *CommentUseCase {
	mock := &CommentUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
