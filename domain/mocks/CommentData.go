// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "backend/domain"

	mock "github.com/stretchr/testify/mock"
)

// CommentData is an autogenerated mock type for the CommentData type
type CommentData struct {
	mock.Mock
}

// CreateCommentData provides a mock function with given fields: newcomment
func (_m *CommentData) CreateCommentData(newcomment domain.Comment) domain.Comment {
	ret := _m.Called(newcomment)

	var r0 domain.Comment
	if rf, ok := ret.Get(0).(func(domain.Comment) domain.Comment); ok {
		r0 = rf(newcomment)
	} else {
		r0 = ret.Get(0).(domain.Comment)
	}

	return r0
}

// DeleteCommentData provides a mock function with given fields: commentid, bookid
func (_m *CommentData) DeleteCommentData(commentid int, bookid int) bool {
	ret := _m.Called(commentid, bookid)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(commentid, bookid)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ReadCommentData provides a mock function with given fields:
func (_m *CommentData) ReadCommentData() []domain.CommentUser {
	ret := _m.Called()

	var r0 []domain.CommentUser
	if rf, ok := ret.Get(0).(func() []domain.CommentUser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.CommentUser)
		}
	}

	return r0
}

type mockConstructorTestingTNewCommentData interface {
	mock.TestingT
	Cleanup(func())
}

// NewCommentData creates a new instance of CommentData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCommentData(t mockConstructorTestingTNewCommentData) *CommentData {
	mock := &CommentData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
